import numpy as np
import cv2
import time


#img = cv2.imread("data\\reference footage\\images\\Parked_Car.png")
img = cv2.imread("..\\data\\reference footage\\images\\Parked_Car.png")
mask = np.zeros(img.shape[:2], np.uint8)

#rect = (11, 16, 154, 119)
rect = (1,1, 163, 121)

start_time = time.time()
seconds_before_display = 1  # displays the frame rate every 1 second
counter = 0

while True:
	bgModel =  np.zeros((1,65),np.float64)
	fgModel =  np.zeros((1,65),np.float64)

	# apply GrabCut using the the bounding box segmentation method
	(mask, bgModel, fgModel) = cv2.grabCut(img, mask, rect, bgModel, fgModel, iterCount=10, mode=cv2.GC_INIT_WITH_RECT)

	# the output mask has for possible output values, marking each pixel
	# in the mask as (1) definite background, (2) definite foreground,
	# (3) probable background, and (4) probable foreground
	values = (
		("Definite Background", cv2.GC_BGD),
		("Probable Background", cv2.GC_PR_BGD),
		("Definite Foreground", cv2.GC_FGD),
		("Probable Foreground", cv2.GC_PR_FGD),
	)
	# loop over the possible GrabCut mask values
	for (name, value) in values:
		# construct a mask that for the current value
		#print("[INFO] showing mask for '{}'".format(name))
		valueMask = (mask == value).astype("uint8") * 255

	cv2.imshow(name, valueMask)
	counter += 1
	if (time.time() - start_time) > seconds_before_display:
		print("FPS: ", counter / (time.time() - start_time))
		counter = 0
		start_time = time.time()

	if cv2.waitKey(1) & 0xFF == ord('q'):
		cv2.destroyAllWindows()
		break


# # we'll set all definite background and probable background pixels
# # to 0 while definite foreground and probable foreground pixels are
# # set to 1
# outputMask = np.where((mask == cv2.GC_BGD) | (mask == cv2.GC_PR_BGD),
# 	0, 1)
# # scale the mask from the range [0, 1] to [0, 255]
# outputMask = (outputMask * 255).astype("uint8")
# # apply a bitwise AND to the image using our mask generated by
# # GrabCut to generate our final output image
# #output = cv2.bitwise_and(img, img, mask=outputMask)
# outputMask = cv2.cvtColor(outputMask, cv2.COLOR_GRAY2BGR)
# output = cv2.subtract(outputMask, img)
# # show the input image followed by the mask and output generated by
# # GrabCut and bitwise masking
# cv2.imshow("Input", img)
# cv2.imshow("GrabCut Mask", outputMask)
# cv2.imshow("GrabCut Output", output)
# cv2.waitKey(0)
